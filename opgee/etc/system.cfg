[DEFAULT]

# This project is used if '-P' flag not given to the 'gt' command
OPGEE.DefaultProject =

# This defines the variable for documentation purposes. The value
# is set automatically in each project section to the name of that
# section -- unless a non-blank value already exists in the section.
OPGEE.ProjectName =

# Root directory for where the user keeps project folders
OPGEE.ProjectRoot = %(Home)s/projects
OPGEE.ProjectDir  = %(OPGEE.ProjectRoot)s/%(OPGEE.ProjectName)s

# Where to find plug-ins. Internal plugin directory is added
# automatically. Use this to add custom plug-ins outside the opgee
# source tree. The value is a semicolon-delimited (on Windows) or
# colon-delimited (on Unix) string of directories to search for files
# matching the pattern '*_plugin.py'
OPGEE.PluginPath = %(OPGEE.ProjectDir)s/plugins

# Where to find user-defined LCA model classes. The value is one or more
# Python files or directories, delimited by semicolon (on Windows) or colon
# (on Unix). For directories, all '.py' files found in the directory are
# loaded.
OPGEE.ClassPath =

# Where to find user's customizations
OPGEE.UserXmlDirectory = %(Home)s/opgee/%(OPGEE.ProjectName)s

# Where to find user's attributes.xml file (optional)
OPGEE.UserAttributesFile =

# Allow user to provide comma-delimited list of additional components
# that should be allowed in Streams.
OPGEE.StreamComponents =

# The path separator defaults to ":" but is overridden in Windows.cfg
# to be ";" since ":" appears after drive specifiers in Windows paths.
# TBD: set from os.path.pathsep
PATHSEP = :

# Change this if desired to increase or decrease diagnostic messages.
# A default value can be set here, and a project-specific value can
# be set in the project's config file section.
# Possible values (from most to least verbose) are:
# DEBUG, INFO, WARNING, ERROR, CRITICAL
OPGEE.LogLevel = INFO

OPGEE.LogConsole = True

# If set, application logger messages are written here.
OPGEE.LogDir = %(Home)s/tmp
OPGEE.LogFile = %(OPGEE.LogDir)s/opgee.log

# Format strings for log files and console messages. Note doubled
# '%%' required here around logging parameters to avoid attempted
# variable substitution within the config system.
OPGEE.LogFileFormat    = %%(asctime)s %%(levelname)s %%(name)s:%%(lineno)d %%(message)s
OPGEE.LogConsoleFormat = %%(levelname)s %%(name)s: %%(message)s

# The name of the queue used for submitting batch jobs on a cluster.
# On SLURM, you can request multiple queue, taking first one available.
OPGEE.DefaultQueue = slurm

SLURM.BatchCommand  = sbatch -p {partition} -J {jobName} -t {walltime} -e {logFile} -o {logFile} --nodes=1 --get-user-env=10L {dependencies} {scriptFile}
SLURM.JOB_ID_VAR    = SLURM_JOB_ID

# Set this to 'after' to run dependencies even if baseline fails (SLURM only)
SLURM.DependencyFlag = afterok

# Known values currently are SLURM, PBS, and LSF
OPGEE.BatchSystem = SLURM

OPGEE.BatchCommand = %(SLURM.BatchCommand)s

# For batch submissions, the default number of minutes to allocate per task.
OPGEE.Minutes = 20

# Where to create temporary files
OPGEE.TempDir = /tmp

# For debugging purposes: tool.py can show a stack trace on error
OPGEE.ShowStackTrace = False

# TextEditor to open via the --edit option to the 'config' sub-command
OPGEE.TextEditor = vi
